using System;
using System.Collections.Generic;
using System.Text;
using StellarMass.Utilities.Extensions;
using UnityEngine.InputSystem;

namespace StellarMass.InputManagement.Editor
{
    public static class MapInstanceContentBuilder
    {
        public static void AddContentForMapInstance(string markerName, InputActionMap map, List<string> lines)
        {
            string mapName = map.name.AllWhitespaceTrimmed();
            string interfaceName = $"I{mapName}Actions";
            string inputActionsGeneratedName = nameof(InputActionsGenerated);
            
            switch (markerName)
            {
                case "Ignore":
                    break;
                case "ClassSignature":
                    classSignature();
                    break;
                case "ActionsGetterProperty":
                    actionsGetterProperty();
                    break;
                case "PublicEvents":
                    publicEvents();
                    break;
                case "ConstructorSignature":
                    constructorSignature();
                    break;
                case "SetUpActions":
                    setUpActions();
                    break;
                case "AddCallbacks":
                    addCallbacks();
                    break;
                case "RemoveCallbacks":
                    removeCallbacks();
                    break;
                case "InterfaceMethods":
                    interfaceMethods();
                    break;
            }
            
            void classSignature()
            {
                lines.Add("    ///<summary>");
                lines.Add($"    /// This class was automatically generated by {nameof(MapInstanceGenerator)}.");
                lines.Add("    ///</summary>");
                lines.Add("    [Serializable]");
                lines.Add($"    public class {mapName} : MapInstance, InputActionsGenerated.{interfaceName}");
            }

            void actionsGetterProperty()
            {
                lines.Add($"        private {inputActionsGeneratedName}.{mapName}Actions {mapName}Actions" + " { get; }");
            }

            void publicEvents()
            {
                foreach (InputAction inputAction in map.actions)
                {
                    string trimmedName = inputAction.name.AllWhitespaceTrimmed();
                    List<string> arguments = new() { nameof(InputActionPhase) };
                    if (inputAction.expectedControlType != "Button")
                    {
                        arguments.Add(ControlTypeTranslator.Translate(inputAction.expectedControlType));
                    }
                    StringBuilder argumentsString = new();
                    for (int i = 0; i < arguments.Count; i++)
                    {
                        string s = arguments[i];
                        argumentsString.Append(s);
                        if (i < arguments.Count - 1)
                        {
                            argumentsString.Append(", ");
                        }
                    }

                    lines.Add($"        public event Action<{argumentsString}> @On{trimmedName};");
                }
            }

            void constructorSignature()
            {
                lines.Add($"        public {mapName}({inputActionsGeneratedName}.{mapName}Actions actions)");
            }

            void setUpActions()
            {
                lines.Add($"            {mapName}Actions = actions;");
                lines.Add($"            ActionMap = {mapName}Actions.Get();");
            }

            void addCallbacks()
            {
                lines.Add($"        protected sealed override void AddCallbacks() => {mapName}Actions.AddCallbacks(this);");
            }

            void removeCallbacks()
            {
                lines.Add($"        protected sealed override void RemoveCallbacks() => {mapName}Actions.RemoveCallbacks(this);");
            }

            void interfaceMethods()
            {
                foreach (InputAction inputAction in map.actions)
                {
                    string trimmedName = inputAction.name.AllWhitespaceTrimmed();
                    List<string> arguments = new() { "context.phase" };
                    if (inputAction.expectedControlType != "Button")
                    {
                        arguments.Add($"context.ReadValue<{ControlTypeTranslator.Translate(inputAction.expectedControlType)}>()");
                    }

                    StringBuilder argumentsString = new();
                    for (int i = 0; i < arguments.Count; i++)
                    {
                        string s = arguments[i];
                        argumentsString.Append(s);
                        if (i < arguments.Count - 1)
                        {
                            argumentsString.Append(", ");
                        }
                    }

                    lines.Add($"        void {inputActionsGeneratedName}.{interfaceName}.On{trimmedName}(InputAction.CallbackContext context) => On{trimmedName}?.Invoke({argumentsString});");
                }
            }
        }
    }
}