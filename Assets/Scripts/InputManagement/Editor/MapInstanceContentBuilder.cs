using System.Collections.Generic;
using System.Text;
using StellarMass.Utilities.Extensions;
using UnityEngine.InputSystem;

namespace StellarMass.InputManagement.Editor
{
    public static class MapInstanceContentBuilder
    {
        public static void AddContentForMapInstance(string markerName, InputActionMap map, List<string> lines)
        {
            string mapName = map.name.AllWhitespaceTrimmed().CapitalizeFirst();
            string interfaceName = $"I{mapName}Actions";
            string inputActionsGeneratedName = GeneratorHelper.IInputActionsClassName;

            switch (markerName)
            {
                case "Ignore":
                    break;
                case "UsingDirective":
                    lines.Add($"using {GeneratorHelper.IInputActionsNamespace};");
                    break;
                case "ClassSignature":
                    classSignature();
                    break;
                case "ActionsGetterProperty":
                    actionsGetterProperty();
                    break;
                case "PublicEvents":
                    publicEvents();
                    break;
                case "ConstructorSignature":
                    constructorSignature();
                    break;
                case "SetUpActions":
                    setUpActions();
                    break;
                case "AddCallbacks":
                    addCallbacks();
                    break;
                case "RemoveCallbacks":
                    removeCallbacks();
                    break;
                case "InterfaceMethods":
                    interfaceMethods();
                    break;
            }
            
            void classSignature()
            {
                lines.Add("    ///<summary>");
                lines.Add($"    /// This class was automatically generated by {nameof(InputScriptGenerator)}.");
                lines.Add("    ///</summary>");
                lines.Add("    [Serializable]");
                lines.Add($"    public class {mapName} : MapInstance, {inputActionsGeneratedName}.{interfaceName}");
            }

            void actionsGetterProperty()
            {
                lines.Add($"        private {inputActionsGeneratedName}.{mapName}Actions {mapName}Actions" + " { get; }");
            }

            void publicEvents()
            {
                foreach (InputAction inputAction in map.actions)
                {
                    string nameString = inputAction.name.AllWhitespaceTrimmed().CapitalizeFirst();
                    lines.Add($"        public event Action<InputAction.CallbackContext> @On{nameString};");
                }
            }

            void constructorSignature()
            {
                lines.Add($"        public {mapName}({inputActionsGeneratedName}.{mapName}Actions actions)");
            }

            void setUpActions()
            {
                lines.Add($"            {mapName}Actions = actions;");
                lines.Add($"            ActionMap = {mapName}Actions.Get();");
            }

            void addCallbacks()
            {
                lines.Add($"        protected sealed override void AddCallbacks() => {mapName}Actions.AddCallbacks(this);");
            }

            void removeCallbacks()
            {
                lines.Add($"        protected sealed override void RemoveCallbacks() => {mapName}Actions.RemoveCallbacks(this);");
            }

            void interfaceMethods()
            {
                foreach (InputAction inputAction in map.actions)
                {
                    string nameString = inputAction.name.AllWhitespaceTrimmed().CapitalizeFirst();
                    lines.Add($"        void {inputActionsGeneratedName}.{interfaceName}.On{nameString}(InputAction.CallbackContext context) => On{nameString}?.Invoke(context);");
                }
            }
        }
    }
}