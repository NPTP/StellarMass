using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using StellarMass.InputManagement.Data;
using StellarMass.Utilities.Editor;
using StellarMass.Utilities.Extensions;
using UnityEditor;
using UnityEngine;
using UnityEngine.InputSystem;

namespace StellarMass.InputManagement.Editor
{
    public static class GeneratorHelper
    {
        private const string MARKER = "// MARKER";
        private const string START = "Start";
        private const string END = "End";
        
        public static string AsField(this string s) => s.AllWhitespaceTrimmed().LowercaseFirst();
        public static string AsType(this string s) => s.AllWhitespaceTrimmed().CapitalizeFirst();
        public static string AsEnumMember(this string s) => s.AlphaNumericCharactersOnly();

        public static void ClearFolder(string folderPath)
        {
            string fullSystemPath = Application.dataPath + folderPath;
            if (!Directory.Exists(fullSystemPath))
            {
                Directory.CreateDirectory(fullSystemPath);
            }
            else
            {
                string[] filePaths = Directory.GetFiles(fullSystemPath);

                foreach (string filePath in filePaths)
                {
                    File.Delete(filePath);
                }
            }
        }

        public static void WriteLinesToFile(List<string> newLines, string filePath)
        {
            try
            {
                using (StreamWriter sw = new(filePath))
                {
                    foreach (string line in newLines)
                    {
                        sw.WriteLine(line);
                    }
                }

                Debug.Log($"{filePath} written successfully!");
            }
            catch (Exception e)
            {
                Debug.Log($"File could not be written: {e.Message}");
            }
        }

        public static List<string> GetGeneratorNoticeLines()
        {
            return new List<string>
            {
                $"// ------------------------------------------------------------------------",
                $"// This file was automatically generated by {nameof(InputScriptGenerator)}.",
                $"// ------------------------------------------------------------------------"
            };
        }
        
        public static IEnumerable<string> GetCleanedMapNames(InputActionAsset asset)
        {
            return asset.actionMaps.Select(map => map.name.AllWhitespaceTrimmed().CapitalizeFirst());
        }
        
        public static IEnumerable<string> GetMapNames(InputActionAsset asset)
        {
            return asset.actionMaps.Select(map => map.name);
        }

        public static string GetMapActionsTemplateFilePath()
        {
            OfflineInputData offlineInputData = EditorAssetGetter.GetFirst<OfflineInputData>();
            return Application.dataPath + AssetDatabase.GetAssetPath(offlineInputData.MapActionsTemplateFile).Replace("Assets", string.Empty);
        }
        
        public static string GetMapCacheTemplateFilePath()
        {
            OfflineInputData offlineInputData = EditorAssetGetter.GetFirst<OfflineInputData>();
            return Application.dataPath + AssetDatabase.GetAssetPath(offlineInputData.MapCacheTemplateFile).Replace("Assets", string.Empty);
        }
        
        public static string GetPathForGeneratedClass(string localPath)
        {
            return Application.dataPath + localPath;
        }

        public static void AddLines(List<string> addTo, string leadingWhitespace, params string[] linesToAdd)
        {
            for (int i = 0; i < linesToAdd.Length; i++)
            {
                string lineToAdd = leadingWhitespace + linesToAdd[i];
                if (string.IsNullOrEmpty(lineToAdd))
                {
                    continue;
                }
                
                addTo.Add(lineToAdd);
            }
        }
        
        public static bool IsMarkerStart(string line, out string markerName)
        {
            string trimmedLine = line.Trim();
            bool isMarkerStart = trimmedLine.StartsWith(MARKER) && trimmedLine.EndsWith(START);

            if (!isMarkerStart)
            {
                markerName = string.Empty;
                return false;
            }
            
            StringBuilder sb = new();
            int periodCount = 0;
            foreach (char c in trimmedLine)
            {
                if (c == '.')
                {
                    periodCount++;
                    if (periodCount == 2)
                    {
                        break;
                    }
                    continue;
                }

                if (periodCount == 1)
                {
                    sb.Append(c);
                }
            }

            markerName = sb.ToString();
            return true;
        }

        public static bool IsMarkerEnd(string line)
        {
            string trimmedLine = line.Trim();
            return trimmedLine.StartsWith(MARKER) && trimmedLine.EndsWith(END);
        }
    }
}