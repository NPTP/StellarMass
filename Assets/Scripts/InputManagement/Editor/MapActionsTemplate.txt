using System;
using UnityEngine.InputSystem;
// MARKER.UsingDirective.Start
// MARKER.UsingDirective.End

namespace StellarMass.InputManagement
{
    // MARKER.Ignore.Start
    /// <summary>
    /// This script is used by the map instance code generator as a template to generate new C# input classes
    /// and their respective .cs files. Do not modify it unless you know what you're doing!
    /// </summary>
    // MARKER.Ignore.End
    // MARKER.ClassSignature.Start
    [Serializable]
    public class MapActionsTemplate : InputActions.IGameplayActions
    // MARKER.ClassSignature.End
    {
        // MARKER.PublicEvents.Start
        public event Action<InputActionPhase> @OnThrust;
        public event Action<InputActionPhase> @OnShoot;
        public event Action<InputActionPhase> @OnHyperspace;
        public event Action<InputActionPhase, float> @OnTurn;
        public event Action<InputActionPhase> @OnPause;
        // MARKER.PublicEvents.End
        
        // MARKER.InterfaceMethods.Start
        void InputActions.IGameplayActions.OnThrust(InputAction.CallbackContext context) => OnThrust?.Invoke(context.phase);
        void InputActions.IGameplayActions.OnShoot(InputAction.CallbackContext context) => OnShoot?.Invoke(context.phase);
        void InputActions.IGameplayActions.OnHyperspace(InputAction.CallbackContext context) => OnHyperspace?.Invoke(context.phase);
        void InputActions.IGameplayActions.OnTurn(InputAction.CallbackContext context) => OnTurn?.Invoke(context.phase, context.ReadValue<float>());
        void InputActions.IGameplayActions.OnPause(InputAction.CallbackContext context) => OnPause?.Invoke(context.phase);
        // MARKER.InterfaceMethods.End
    }
}
