using System.Collections.Generic;
using StellarMass.Utilities.Extensions;
using UnityEngine.InputSystem;

namespace StellarMass.InputManagement.Editor.ScriptContentBuilders
{
    public static class MapActionsContentBuilder
    {
        public static void AddContentForMapInstance(string markerName, InputActionMap map, List<string> lines)
        {
            string mapName = map.name.AllWhitespaceTrimmed().CapitalizeFirst();
            string className = $"{mapName}Actions";
            string interfaceName = $"I{mapName}Actions";
            string actionsProperty = "Actions";
            string inputActionsGeneratedName = GeneratorHelper.IInputActionsClassName;

            switch (markerName)
            {
                case "Ignore":
                    break;
                case "UsingDirective":
                    string inputActionsNamespace = GeneratorHelper.IInputActionsNamespace;
                    if (!string.IsNullOrEmpty(inputActionsNamespace))
                        lines.Add($"using {inputActionsNamespace};");
                    break;
                case "ClassSignature":
                    lines.Add("    ///<summary>");
                    lines.Add($"    /// This class was automatically generated by {nameof(InputScriptGenerator)}.");
                    lines.Add("    ///</summary>");
                    lines.Add($"    public class {className} : {inputActionsGeneratedName}.{interfaceName}");
                    break;
                case "PublicEvents":
                    foreach (InputAction inputAction in map.actions)
                    {
                        string nameString = inputAction.name.AllWhitespaceTrimmed().CapitalizeFirst();
                        lines.Add($"        public event Action<InputAction.CallbackContext> @On{nameString};");
                    }
                    break;
                case "AddCallbacks":
                    lines.Add($"        protected sealed override void AddCallbacks() => {actionsProperty}.AddCallbacks(this);");
                    break;
                case "RemoveCallbacks":
                    lines.Add($"        protected sealed override void RemoveCallbacks() => {actionsProperty}.RemoveCallbacks(this);");
                    break;
                case "InterfaceMethods":
                    foreach (InputAction inputAction in map.actions)
                    {
                        string nameString = inputAction.name.AllWhitespaceTrimmed().CapitalizeFirst();
                        lines.Add($"        void {inputActionsGeneratedName}.{interfaceName}.On{nameString}(InputAction.CallbackContext context) => On{nameString}?.Invoke(context);");
                    }
                    break;
            }
        }
    }
}