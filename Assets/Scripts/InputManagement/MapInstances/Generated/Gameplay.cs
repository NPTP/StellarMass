using System;
using UnityEngine;
using UnityEngine.InputSystem;
using StellarMass.InputManagement.UnityGenerated;

namespace StellarMass.InputManagement.MapInstances
{
    ///<summary>
    /// This class was automatically generated by InputScriptGenerator.
    ///</summary>
    [Serializable]
    public class Gameplay : MapInstance, InputActions.IGameplayActions
    {
        private InputActions.GameplayActions GameplayActions { get; }

        public event Action<InputAction.CallbackContext> @OnThrust;
        public event Action<InputAction.CallbackContext> @OnShoot;
        public event Action<InputAction.CallbackContext> @OnHyperspace;
        public event Action<InputAction.CallbackContext> @OnTurn;
        public event Action<InputAction.CallbackContext> @OnPause;

        public Gameplay(InputActions.GameplayActions actions)
        {
            GameplayActions = actions;
            ActionMap = GameplayActions.Get();
            AddCallbacks();
        }

        protected sealed override void AddCallbacks() => GameplayActions.AddCallbacks(this);
        protected sealed override void RemoveCallbacks() => GameplayActions.RemoveCallbacks(this);

        void InputActions.IGameplayActions.OnThrust(InputAction.CallbackContext context) => OnThrust?.Invoke(context);
        void InputActions.IGameplayActions.OnShoot(InputAction.CallbackContext context) => OnShoot?.Invoke(context);
        void InputActions.IGameplayActions.OnHyperspace(InputAction.CallbackContext context) => OnHyperspace?.Invoke(context);
        void InputActions.IGameplayActions.OnTurn(InputAction.CallbackContext context) => OnTurn?.Invoke(context);
        void InputActions.IGameplayActions.OnPause(InputAction.CallbackContext context) => OnPause?.Invoke(context);
    }
}
