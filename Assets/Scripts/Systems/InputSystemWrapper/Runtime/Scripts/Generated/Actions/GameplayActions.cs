using NPTP.InputSystemWrapper.Actions;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.XR;
using Button = UnityEngine.InputSystem.HID.HID.Button;

// ------------------------------------------------------------------------------------------
// This file was automatically generated by InputScriptGenerator. Do not modify it manually.
// ------------------------------------------------------------------------------------------
namespace NPTP.InputSystemWrapper.Generated.Actions
{
    public class GameplayActions
    {
        internal InputActionMap ActionMap { get; }
        
        public ActionWrapper Thrust { get; }
        public ActionWrapper Shoot { get; }
        public ActionWrapper Hyperspace { get; }
        public ValueActionWrapper<float> Turn { get; }
        public ActionWrapper Pause { get; }
        
        private bool enabled;
        
        internal GameplayActions(InputActionAsset asset)
        {
            ActionMap = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            
            Thrust = new (ActionMap.FindAction("Thrust", throwIfNotFound: true));
            Shoot = new (ActionMap.FindAction("Shoot", throwIfNotFound: true));
            Hyperspace = new (ActionMap.FindAction("Hyperspace", throwIfNotFound: true));
            Turn = new (ActionMap.FindAction("Turn", throwIfNotFound: true));
            Pause = new (ActionMap.FindAction("Pause", throwIfNotFound: true));
        }
        
        internal void EnableAndRegisterCallbacks()
        {
            if (enabled)
            {
                return;
            }

            enabled = true;
            ActionMap.Enable();
            
            Thrust.RegisterCallbacks();
            Shoot.RegisterCallbacks();
            Hyperspace.RegisterCallbacks();
            Turn.RegisterCallbacks();
            Pause.RegisterCallbacks();
        }
        
        internal void DisableAndUnregisterCallbacks()
        {
            if (!enabled)
            {
                return;
            }

            enabled = false;
            ActionMap.Disable();

            Thrust.UnregisterCallbacks();
            Shoot.UnregisterCallbacks();
            Hyperspace.UnregisterCallbacks();
            Turn.UnregisterCallbacks();
            Pause.UnregisterCallbacks();
        }
    }
}
